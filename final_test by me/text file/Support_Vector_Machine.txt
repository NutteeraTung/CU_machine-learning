# คำอธิบายไฟล์ Support_Vector_Machine.ipynb

## ภาพรวมของไฟล์

ไฟล์นี้เป็น Jupyter Notebook สำหรับการเรียนรู้เกี่ยวกับ Support Vector Machines (SVMs) ซึ่งเป็นอัลกอริทึมการเรียนรู้ของเครื่อง (Machine Learning) ที่ใช้สำหรับการจำแนกประเภทข้อมูล (Classification) โดยในไฟล์นี้จะแบ่งเป็นสองส่วนหลักๆ:

1. การใช้ SVM กับชุดข้อมูลตัวอย่างแบบ 2 มิติ เพื่อให้เข้าใจหลักการทำงานของ SVM
2. การประยุกต์ใช้ SVM ในการสร้างระบบจำแนกอีเมลขยะ (Spam Classifier)

## รายละเอียดเนื้อหา

### 1. บทนำ (Introduction)
- อธิบายว่าในแบบฝึกหัดนี้จะใช้ Support Vector Machines (SVMs) เพื่อสร้างระบบจำแนกอีเมลขยะ
- แนะนำไลบรารีที่จะใช้ในการทำงาน ได้แก่ numpy สำหรับการคำนวณเชิงตัวเลข, matplotlib สำหรับการพล็อตกราฟ, และ scipy สำหรับการคำนวณทางวิทยาศาสตร์

### 2. Support Vector Machines
- เริ่มต้นด้วยการใช้ SVM กับชุดข้อมูลตัวอย่าง 2 มิติที่สามารถแบ่งแยกได้ด้วยเส้นตรง
- แสดงการพล็อตข้อมูลฝึกสอน (Training Data) ซึ่งประกอบด้วยตัวอย่างเชิงบวก (แทนด้วย 'x') และตัวอย่างเชิงลบ (แทนด้วย 'o')
- อธิบายว่าพารามิเตอร์ C ใน SVM มีผลต่อการตัดสินใจของโมเดลอย่างไร โดย C เป็นค่าที่ควบคุมการลงโทษสำหรับการจำแนกผิดพลาด
- ทดลองใช้ค่า C ต่างๆ (เช่น C=1 และ C=100) และดูผลลัพธ์ที่ได้

### 3. SVM กับ Gaussian Kernels
- แนะนำการใช้ Gaussian Kernel (หรือ RBF Kernel) เพื่อจัดการกับข้อมูลที่ไม่สามารถแบ่งแยกได้ด้วยเส้นตรง
- มีการเขียนฟังก์ชัน `gaussianKernel` เพื่อคำนวณค่า Gaussian Kernel ระหว่างจุดข้อมูลสองจุด
- ทดสอบฟังก์ชันกับตัวอย่างที่กำหนดให้
- ใช้ SVM กับ Gaussian Kernel บนชุดข้อมูลตัวอย่างที่ 2 ซึ่งไม่สามารถแบ่งแยกได้ด้วยเส้นตรง

### 4. การสร้าง Spam Classifier
- ใช้ SVM เพื่อสร้างระบบจำแนกอีเมลขยะ
- มีการประมวลผลข้อมูลอีเมล การสกัดคุณลักษณะ (Feature Extraction) และการฝึกโมเดล SVM
- ทดสอบประสิทธิภาพของโมเดลบนชุดข้อมูลทดสอบ

## ส่วนของโค้ดที่สำคัญ

1. **การโหลดและแสดงข้อมูล**:
   ```python
   data = loadmat(os.path.join('Data', 'SVM_data1.mat'))
   X, y = data['X'], data['y'][:, 0]
   utils.plotData(X, y)
   plt.show()
   ```

2. **การฝึกโมเดล SVM**:
   ```python
   C = 100  # ค่าพารามิเตอร์ C สามารถปรับเปลี่ยนได้
   model = utils.svmTrain(X, y, C, utils.linearKernel, 1e-3, 20)
   utils.visualizeBoundaryLinear(X, y, model)
   plt.show()
   ```

3. **การสร้างฟังก์ชัน Gaussian Kernel**:
   ```python
   def gaussianKernel(x1, x2, sigma):
       sim = np.exp(-np.sum(np.square(x1-x2)) / (2 * np.square(sigma)))
       return sim
   ```

## ข้อสังเกตสำคัญ

1. **ผลของพารามิเตอร์ C**:
   - เมื่อ C=1: SVM จะสร้างเส้นแบ่งที่มีระยะห่างมากขึ้น แต่อาจจำแนกข้อมูลบางจุดผิดพลาด
   - เมื่อ C=100: SVM จะพยายามจำแนกข้อมูลทุกจุดให้ถูกต้อง แต่เส้นแบ่งอาจไม่เป็นธรรมชาติ

2. **การใช้ Gaussian Kernel**:
   - ช่วยให้ SVM สามารถจัดการกับข้อมูลที่ไม่สามารถแบ่งแยกได้ด้วยเส้นตรง
   - พารามิเตอร์ sigma ใน Gaussian Kernel มีผลต่อความกว้างของฟังก์ชัน

3. **การประยุกต์ใช้กับการจำแนกอีเมลขยะ**:
   - SVM สามารถใช้ได้ดีกับปัญหาการจำแนกข้อความ เช่น การแยกอีเมลขยะ
   - ต้องมีการประมวลผลข้อมูลและสกัดคุณลักษณะที่เหมาะสมก่อนนำไปใช้กับ SVM

โดยสรุป ไฟล์นี้เป็นบทเรียนที่ดีสำหรับการเรียนรู้เกี่ยวกับ Support Vector Machines ทั้งในแง่ของทฤษฎีและการประยุกต์ใช้งานจริง ผู้เรียนจะได้เข้าใจหลักการทำงานของ SVM ผ่านการทดลองกับชุดข้อมูลตัวอย่าง และได้เห็นการนำไปประยุกต์ใช้กับปัญหาจริงอย่างการจำแนกอีเมลขยะ